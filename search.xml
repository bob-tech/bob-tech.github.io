<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>spring boot 集成mybatis-plus，自定义数据源</title>
      <link href="/2018/12/05/spring-boot-mybatis-datasource/"/>
      <url>/2018/12/05/spring-boot-mybatis-datasource/</url>
      
        <content type="html"><![CDATA[<p>Spring boot的兴起，使得基于Spring框架的开发更加便捷，在和Mybstis的整合中，自定义数据源经常遇到。尽管spring boot可以自动的注入基于spring.datasource.XXXX格式的数据源,XXXX代表的数据库(连接池)信息。在实际的项目中，在遇到多数据源配置时，就需要我们自定义数据源了。<br>下面就让我们一步步的定义一个数据源并配合Mybatis工具使用</p><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:</span><br><span class="line">    - dev</span><br><span class="line">  aop:</span><br><span class="line">    proxy-target-class: true</span><br><span class="line"></span><br><span class="line">  ##数据库连接信息</span><br><span class="line">  datasource:</span><br><span class="line">    antenna01: </span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">      username: root</span><br><span class="line">      password: 0000</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">      ###################以下为druid增加的配置###########################</span><br><span class="line">      type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">      # 下面为连接池的补充设置，应用到上面所有数据源中</span><br><span class="line">      # 初始化大小，最小，最大</span><br><span class="line">      initial-size: 5</span><br><span class="line">      min-idle: 5</span><br><span class="line">      max-active: 20</span><br><span class="line">      # 配置获取连接等待超时的时间</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">      time-between-eviction-runs-millis: 60000</span><br><span class="line">      # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">      min-evictable-idle-time-millis: 300000</span><br><span class="line">      validation-query: SELECT 1 FROM DUAL</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: false</span><br><span class="line">      test-on-return: false</span><br><span class="line">      # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">      pool-prepared-statements: true</span><br><span class="line">      max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙，此处是filter修改的地方</span><br><span class="line">      filters:</span><br><span class="line">        commons-log.connection-logger-name: stat,wall,log4j</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="line">      # 合并多个DruidDataSource的监控数据</span><br><span class="line">      useGlobalDataSourceStat: true</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">#mybatis</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath*:/mybatis/**Mapper.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      #主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;</span><br><span class="line">      id-type: AUTO</span><br><span class="line">      #字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;</span><br><span class="line">      field-strategy: NOT_EMPTY</span><br><span class="line">      #驼峰下划线转换</span><br><span class="line">      table-underline: true</span><br><span class="line">      #逻辑删除配置（下面3个配置）</span><br><span class="line">      logic-delete-value: 1</span><br><span class="line">      logic-not-delete-value: 0</span><br><span class="line">  configuration:</span><br><span class="line">    #配置返回数据库(column下划线命名&amp;&amp;返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId） </span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    cache-enabled: false</span><br><span class="line">    #配置JdbcTypeForNull, oracle数据库必须配置</span><br><span class="line">    jdbc-type-for-null: &apos;null&apos;</span><br></pre></td></tr></table></figure><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean(&quot;dataSource&quot;)</span><br><span class="line">@ConfigurationProperties(&quot;spring.datasource.antenna01&quot;)</span><br><span class="line">public DataSource dataSource() &#123;</span><br><span class="line">return DruidDataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public DataSourceTransactionManager transactionManager(@Qualifier(&quot;dataSource&quot;) DataSource adsDataSource) &#123;</span><br><span class="line">return new DataSourceTransactionManager(dataSource());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mybatis-plus-插件配置"><a href="#mybatis-plus-插件配置" class="headerlink" title="mybatis plus 插件配置"></a>mybatis plus 插件配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MybatisPlusConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public PerformanceInterceptor performanceInterceptor() &#123;</span><br><span class="line">PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();</span><br><span class="line">/* &lt;!-- SQL 执行性能分析，开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长 --&gt; */</span><br><span class="line">performanceInterceptor.setMaxTime(1000);</span><br><span class="line">/* &lt;!--SQL是否格式化 默认false--&gt; */</span><br><span class="line">performanceInterceptor.setFormat(true);</span><br><span class="line">return performanceInterceptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">return new PaginationInterceptor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public SqlSessionFactory sqlSessionFactory(@Qualifier(&quot;dataSource&quot;) DataSource adsDataSource) throws Exception &#123;</span><br><span class="line">final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class="line">sessionFactory.setDataSource(adsDataSource);</span><br><span class="line">return sessionFactory.getObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.scheduling.TaskScheduler;</span><br><span class="line">import org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line">import org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication(exclude = &#123; DataSourceAutoConfiguration.class &#125;)//很重要，不自动加载数据源</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@EnableScheduling</span><br><span class="line">@MapperScan(basePackages = &quot;com.test.**.dao&quot;)</span><br><span class="line">public class JobApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(JobApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //自定义@Scheduled使用的连接池</span><br><span class="line">@Bean</span><br><span class="line">public ScheduledExecutorService scheduledExecutorService() &#123;</span><br><span class="line">ScheduledExecutorService ss = Executors.newScheduledThreadPool(5);</span><br><span class="line">return ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public TaskScheduler taskScheduler() &#123;</span><br><span class="line">return new ConcurrentTaskScheduler();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java lambda 方法使用(2)</title>
      <link href="/2018/12/04/Java-lambda02/"/>
      <url>/2018/12/04/Java-lambda02/</url>
      
        <content type="html"><![CDATA[<p>在项目中有大量使用java的lambda表达式。对初学者而言，在使用的方式和java中已经实现的模板方法有些不了解，于是整理下一些常用的使用函数。以下的表达式和统计相关的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;);</span><br><span class="line"></span><br><span class="line">IntSummaryStatistics collect = list.stream().collect(Collectors.summarizingInt(Integer::valueOf));</span><br><span class="line">long sum = collect.getSum();//和</span><br><span class="line">long count = collect.getCount();//计数</span><br><span class="line">double average = collect.getAverage();//平均值</span><br><span class="line">int max = collect.getMax();//最大值</span><br><span class="line">int min = collect.getMin();//最小值</span><br><span class="line"></span><br><span class="line">System.out.printf(&quot;sum = %d,count=%d,average = %f,min=%d,max%d\n&quot;, sum,count,average,min,max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;String&gt; accumulator = (x,y) -&gt; x.concat(y);</span><br><span class="line">String reduce = list.stream().reduce(&quot;start:&quot;, accumulator);</span><br><span class="line">System.out.println(reduce);//start:12345678910</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; reduce2 = list.stream().reduce(accumulator);</span><br><span class="line">System.out.println(reduce2);//Optional[12345678910]</span><br><span class="line"></span><br><span class="line">Integer reduce3 = Stream.of(1,2,3,4,5,6,7,8,9,10).reduce(0, (x,y) -&gt; x + y);</span><br><span class="line">System.out.println(reduce3);</span><br><span class="line"></span><br><span class="line">Integer reduce4 = Stream.of(1,2,3,4,5,6,7,8,9,10).reduce(0,  (x,y) -&gt; x + y,  (x,y) -&gt; x + y);</span><br><span class="line">System.out.println(reduce4);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java lambda 方法使用(1)</title>
      <link href="/2018/12/03/Java-lambda01/"/>
      <url>/2018/12/03/Java-lambda01/</url>
      
        <content type="html"><![CDATA[<p>在项目中有大量使用java的lambda表达式。对初学者而言，在使用的方式和java中已经实现的模板方法有些不了解，于是整理下一些常用的使用函数。以下的表达式主要式过滤、分组、收集器相关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = Lists.newArrayList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;);</span><br><span class="line">//打印元素</span><br><span class="line">list.stream().forEach(x -&gt;&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//打印元素</span><br><span class="line">list.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">//过滤元素</span><br><span class="line">List&lt;String&gt; collect = list.stream()</span><br><span class="line">.filter(x -&gt; Integer.valueOf(x) % 2 == 0)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">//判断元素是否满足预判条件，全部满足</span><br><span class="line">boolean allMatch = list.stream().allMatch(x -&gt; Integer.valueOf(x) % 2 == 0);</span><br><span class="line"></span><br><span class="line">//判断元素是否满足预判条件,只要有一个满足</span><br><span class="line">boolean anyMatch = list.stream().anyMatch(x -&gt; Integer.valueOf(x) % 2 == 0);</span><br><span class="line"></span><br><span class="line">//分组</span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; collect2 = list.stream()</span><br><span class="line">.collect(Collectors.groupingBy(x -&gt; Integer.valueOf(x) % 4));</span><br><span class="line"></span><br><span class="line">//特殊的，分成两组</span><br><span class="line">Map&lt;Boolean, List&lt;String&gt;&gt; collect3 = list.stream()</span><br><span class="line">.collect(Collectors.partitioningBy(x -&gt; Integer.valueOf(x) % 2 == 0));</span><br><span class="line"></span><br><span class="line">//转Map</span><br><span class="line">Map&lt;String, String&gt; collect4 = list.stream()</span><br><span class="line">.collect(Collectors.toMap(x -&gt; &quot;key&quot; + x, x -&gt; &quot;value&quot; + x));</span><br><span class="line"></span><br><span class="line">//指定返回集合</span><br><span class="line">TreeSet&lt;String&gt; collect5 = list.stream()</span><br><span class="line">.collect(Collectors.toCollection(() -&gt; new TreeSet&lt;String&gt;()));</span><br><span class="line"></span><br><span class="line">//map转换</span><br><span class="line">List&lt;Integer&gt; collect6 = list.stream().map(x -&gt; Integer.valueOf(x)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">//mapToInt,并求和</span><br><span class="line">list.stream().mapToInt(new ToIntFunction&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int applyAsInt(String value) &#123;</span><br><span class="line">return Integer.valueOf(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).sum();</span><br><span class="line"></span><br><span class="line">//自定义收集器</span><br><span class="line">Supplier&lt;StringBuffer&gt; supplier = () -&gt; new StringBuffer(&quot;&quot;);</span><br><span class="line">BiConsumer&lt;StringBuffer,String&gt; accumulator = (x,y) -&gt; x.append(y);</span><br><span class="line">BiConsumer&lt;StringBuffer,StringBuffer&gt; combiner = (x,y) -&gt; x.append(y);</span><br><span class="line">StringBuffer collect7 = list.stream().collect(supplier , accumulator , combiner);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>easy poi导出多sheet</title>
      <link href="/2018/12/02/easypoi-export/"/>
      <url>/2018/12/02/easypoi-export/</url>
      
        <content type="html"><![CDATA[<p>excel导出是一个常见的功能，也有很多工具jar包。easyPOI是在一次外包项目中遇到的。在查阅官方文档时，发现大部分的导出都是基于单独的POJO说明的，尤其是对多sheet的导出更抽象。如果是每个sheet的内容的标题是一样的，也可以单独定义一个POJO。但是项目中却遇到了每个sheet的标题都不一样，如果继续使用POJO的方式就有点太麻烦了，于是乎在调研结合官方提供的蛛丝马迹，整合了easy poi使用ExcelExportEntity生成多sheet的excel文件。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easypoi-base&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easypoi-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easypoi-annotation&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> try &#123;</span><br><span class="line">       </span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; sheets = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">    </span><br><span class="line">    for(int i = 0;i&lt;10;i++) &#123;</span><br><span class="line">    Map&lt;String,Object&gt; sheet = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        </span><br><span class="line">            List&lt;ExcelExportEntity&gt; entity = new ArrayList&lt;ExcelExportEntity&gt;();//构造对象等同于@Excel</span><br><span class="line">            </span><br><span class="line">            entity.add(new ExcelExportEntity(&quot;性别&quot;, &quot;sex&quot;));</span><br><span class="line">            entity.add(new ExcelExportEntity(&quot;姓名&quot;, &quot;name&quot;));</span><br><span class="line">            </span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            Map&lt;String,Object&gt; h1 = new HashMap&lt;String,Object&gt;();</span><br><span class="line">            h1.put(&quot;name&quot;, &quot;name&quot; + i);</span><br><span class="line">            h1.put(&quot;sex&quot;, &quot;sex&quot; +  i);</span><br><span class="line">            Map&lt;String,Object&gt; h2 = new HashMap&lt;String,Object&gt;();</span><br><span class="line">            h2.put(&quot;name&quot;, &quot;name&quot; +i+i);</span><br><span class="line">            h2.put(&quot;sex&quot;, &quot;sex&quot; +i+i);</span><br><span class="line">            list.add(h1);</span><br><span class="line">            list.add(h2);</span><br><span class="line">            </span><br><span class="line">            sheet.put(NormalExcelConstants.CLASS, ExcelExportEntity.class);</span><br><span class="line">            sheet.put(NormalExcelConstants.DATA_LIST, list);</span><br><span class="line">            sheet.put(NormalExcelConstants.PARAMS, new ExportParams(null, &quot;sheet&quot;+i));</span><br><span class="line">            sheet.put(NormalExcelConstants.MAP_LIST, entity);</span><br><span class="line">            sheets.add(sheet);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     Workbook workbook = new HSSFWorkbook();</span><br><span class="line">     </span><br><span class="line">     for(Map&lt;String,Object&gt; map : sheets) &#123;</span><br><span class="line">     ExcelExportService server = new ExcelExportService();</span><br><span class="line">     ExportParams param = (ExportParams) map.get(&quot;params&quot;);</span><br><span class="line">     @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">List&lt;ExcelExportEntity&gt; entity = (List&lt;ExcelExportEntity&gt;) map.get(&quot;mapList&quot;);</span><br><span class="line">     Collection&lt;?&gt; data = (Collection&lt;?&gt;) map.get(&quot;data&quot;);</span><br><span class="line">     server.createSheetForMap(workbook, param, entity, data);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;D:/ExcelExportForMap.tt.xls&quot;);</span><br><span class="line">        workbook.write(fos);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyPOI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开始征程</title>
      <link href="/2018/12/01/startFlag/"/>
      <url>/2018/12/01/startFlag/</url>
      
        <content type="html"><![CDATA[<p>最近在使用某平台记录技能分享时，发现广告是越来越多，查阅文章还要强制登录。于是乎想脱离原来的blog系统，正好在调研过程中发现了hexo + github的记录blog的方式，后续会将文件都转移到这个平台上。同时也立一个FLAG吧，即将来到的2019年，将分享精神传播下。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
