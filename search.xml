<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>guava 本地缓存使用</title>
      <link href="/2018/12/10/guava-cache/"/>
      <url>/2018/12/10/guava-cache/</url>
      
        <content type="html"><![CDATA[<p>缓存是在实际开发中不可缺少的一部分，guava cache是一个优秀的本地缓存实现，为了限制内存占用，通常都设定为自动回收元素。在某些场景下，尽管LoadingCache不回收元素，它也是很有用的，因为它会自动加载缓存。</p><ul><li><p>你愿意消耗一些内存空间来提升速度。</p></li><li><p>你预料到某些键会被查询一次以上。</p></li><li>缓存中存放的数据总量不会超出内存容量。（Guava Cache是单个应用运行时的本地缓存。它不把数据存放到文件或外部服务器。）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个本地缓存</span><br><span class="line">ListeningExecutorService refreshPools = MoreExecutors</span><br><span class="line">.listeningDecorator(Executors.newFixedThreadPool(RELOAD_CACHE_THREADS));</span><br><span class="line"></span><br><span class="line">LoadingCache&lt;String, Map&lt;String, WordSplit&gt;&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">.refreshAfterWrite(30, TimeUnit.MINUTES).expireAfterAccess(1, TimeUnit.HOURS).maximumSize(50)</span><br><span class="line">.build(new CacheLoader&lt;String, Map&lt;String, WordSplit&gt;&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">// 当本地缓存命没有中时，调用load方法获取结果并将结果缓存</span><br><span class="line">public Map&lt;String, WordSplit&gt; load(String key) &#123;</span><br><span class="line">LOG.info(&quot;开始从redis读取缓存到本地&quot;);</span><br><span class="line">Map&lt;String, WordSplit&gt; data = redisOper.scanOneMap(key);</span><br><span class="line">if (data == null || data.isEmpty()) &#123;</span><br><span class="line">String[] keys = key.replace(REDIS_DICT_WORD_PREFIX, &quot;&quot;).split(&quot;~&quot;);</span><br><span class="line">data = splitDict(keys[0], keys[1], keys[2]);</span><br><span class="line">redisOper.setMap(key, data);</span><br><span class="line">LOG.info(&quot;触发本地缓存还原redis远程数据&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 刷新</span><br><span class="line">@Override</span><br><span class="line">public ListenableFuture&lt;Map&lt;String, WordSplit&gt;&gt; reload(String key, Map&lt;String, WordSplit&gt; oldValue)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">LOG.info(&quot;刷新redis读取缓存到本地&quot;);</span><br><span class="line">return refreshPools.submit(new Callable&lt;Map&lt;String, WordSplit&gt;&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Map&lt;String, WordSplit&gt; call() throws Exception &#123;</span><br><span class="line">Map&lt;String, WordSplit&gt; data = redisOper.scanOneMap(key);</span><br><span class="line">if (data == null || data.isEmpty()) &#123;</span><br><span class="line">String[] keys = key.replace(REDIS_DICT_WORD_PREFIX, &quot;&quot;).split(&quot;~&quot;);</span><br><span class="line">data = splitDict(keys[0], keys[1], keys[2]);</span><br><span class="line">redisOper.setMap(key, data);</span><br><span class="line">LOG.info(&quot;触发本地缓存还原redis远程数据&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guava </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka的基本介绍</title>
      <link href="/2018/12/08/kafka-introduce/"/>
      <url>/2018/12/08/kafka-introduce/</url>
      
        <content type="html"><![CDATA[<ul><li><h5 id="Kafka是分布式发布-订阅消息系统。"><a href="#Kafka是分布式发布-订阅消息系统。" class="headerlink" title="Kafka是分布式发布-订阅消息系统。"></a>Kafka是分布式发布-订阅消息系统。</h5></li><li><h5 id="Kafka的两个作用："><a href="#Kafka的两个作用：" class="headerlink" title="Kafka的两个作用："></a>Kafka的两个作用：</h5><ul><li>降低系统组网复杂度。</li><li>降低编程复杂度，各个子系统不在是相互协商接口，各个子系统类似插口插在插座上，Kafka承担高速数据总线的作用。</li></ul></li><li><h5 id="Kafka主要特点："><a href="#Kafka主要特点：" class="headerlink" title="Kafka主要特点："></a>Kafka主要特点：</h5><ul><li><p>同时为发布和订阅提供高吞吐量。据了解，Kafka每秒可以生产约25万消息（50 MB），每秒处理55万消息（110 MB）。</p></li><li><p>可进行持久化操作。将消息持久化到磁盘，因此可用于批量消费，例如ETL，以及实时应用程序。通过将数据持久化到硬盘以及replication防止数据丢失。</p></li><li><p>分布式系统，易于向外扩展。所有的producer、broker和consumer都会有多个，均为分布式的。无需停机即可扩展机器。</p></li><li><p>消息被处理的状态是在consumer端维护，而不是由server端维护。当失败时能自动平衡。</p></li><li><p>支持online和offline的场景。</p></li></ul></li><li><h5 id="Kafka的架构："><a href="#Kafka的架构：" class="headerlink" title="Kafka的架构："></a>Kafka的架构：</h5><p><img src="/2018/12/08/kafka-introduce/975609a391574a15645c2d2e2494114f.png" alt="Kafka的架构图"></p></li></ul><p>Kafka的整体架构非常简单，是显式分布式架构，producer、broker（kafka）和consumer都可以有多个。Producer，consumer实现Kafka注册的接口，数据从producer发送到broker，broker承担一个中间缓存和分发的作用。broker分发注册到系统中的consumer。broker的作用类似于缓存，即活跃的数据和离线处理系统之间的缓存。客户端和服务器端的通信，是基于简单，高性能，且与编程语言无关的TCP协议。几个基本概念：</p><ol><li><p>Topic：特指Kafka处理的消息源（feeds of messages）的不同分类。</p></li><li><p>Partition：Topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。</p></li><li><p>Message：消息，是通信的基本单位，每个producer可以向一个topic（主题）发布一些消息。</p></li><li><p>Producers：消息和数据生产者，向Kafka的一个topic发布消息的过程叫做producers。</p></li><li><p>Consumers：消息和数据消费者，订阅topics并处理其发布的消息的过程叫做consumers。</p></li><li><p>Broker：缓存代理，Kafka集群中的一台或多台服务器统称为broker。</p></li></ol><ul><li><h5 id="消息发送的流程："><a href="#消息发送的流程：" class="headerlink" title="消息发送的流程："></a>消息发送的流程：</h5><p><img src="/2018/12/08/kafka-introduce/cb5892023c894331a55de5ac7f64582d.png" alt="消息发送的流程图"></p></li></ul><ol><li>Producer根据指定的partition方法（round-robin、hash等），将消息发布到指定topic的partition里面</li><li>kafka集群接收到Producer发过来的消息后，将其持久化到硬盘，并保留消息指定时长（可配置），而不关注消息是否被消费。</li><li>Consumer从kafka集群pull数据，并控制获取消息的offset</li></ol><p>PS:本文来自Blog中的部分内容:<a href="https://www.cnblogs.com/yepei/p/6197236.html" target="_blank" rel="noopener">https://www.cnblogs.com/yepei/p/6197236.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring-kafka的示例</title>
      <link href="/2018/12/08/spring-kafka/"/>
      <url>/2018/12/08/spring-kafka/</url>
      
        <content type="html"><![CDATA[<p>在《Kafka的基本介绍》介绍中，已经了解到kafka基本架构和消息发送流程，下面我们来做一个简单的基于spring kafka的示例.</p><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kindo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;data-trans&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;data-trans&lt;/name&gt;</span><br><span class="line">    &lt;!-- FIXME change it to the project&apos;s website --&gt;</span><br><span class="line">    &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.7.0&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.20.1&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: localhost:9092</span><br><span class="line">    producer:</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: test</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      auto-commit-interval: 1000</span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.kindo.kafka1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Producer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    public void sendMsg(String mesg)&#123;</span><br><span class="line">        kafkaTemplate.send(&quot;test_topic&quot;, mesg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.kindo.kafka1;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Consumer &#123;</span><br><span class="line"></span><br><span class="line">    @KafkaListener(topics = &quot;test_topic&quot;)</span><br><span class="line">    public void listen (ConsumerRecord&lt;?, ?&gt; record) throws Exception &#123;</span><br><span class="line">        System.out.printf(&quot;topic = %s, offset = %d, value = %s \n&quot;, record.topic(), record.offset(), record.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.kindo;</span><br><span class="line"></span><br><span class="line">import com.kindo.kafka1.Producer;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Unit test for simple App.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = App.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line">public class AppTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Producer producer;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testMsg()&#123;</span><br><span class="line">        producer.sendMsg(&quot;this is a test !&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logback-template</title>
      <link href="/2018/12/06/logback-template/"/>
      <url>/2018/12/06/logback-template/</url>
      
        <content type="html"><![CDATA[<p>logback是一个新出来的日记记录工具，也是spring boot 默认的使用工具。现在的项目基本上都是基于boot开发的，保留一个配置的模板。</p><h5 id="材料来自网上，经过加工"><a href="#材料来自网上，经过加工" class="headerlink" title="材料来自网上，经过加工"></a>材料来自网上，经过加工</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration scan=&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, --&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;!--&lt;pattern&gt;%d %p (%file:%line\)- %m%n&lt;/pattern&gt;--&gt;</span><br><span class="line">            &lt;!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;1-%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!--&lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot;/&gt;--&gt;</span><br><span class="line">    &lt;contextName&gt;RestAPI&lt;/contextName&gt;</span><br><span class="line">    &lt;property name=&quot;LOG_PATH&quot; value=&quot;/home/logs&quot;/&gt;</span><br><span class="line">    &lt;!--设置系统日志目录--&gt;</span><br><span class="line">    &lt;property name=&quot;APPDIR&quot; value=&quot;app&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 日志记录器，日期滚动记录 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FileAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_PATH&#125;/$&#123;APPDIR&#125;/log_error.log&lt;/file&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。</span><br><span class="line">            而2013-12-21的日志文件在由fileNamePattern指定。%d&#123;yyyy-MM-dd&#125;指定日期格式，%i指定索引 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_PATH&#125;/$&#123;APPDIR&#125;/log-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;20MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 追加方式记录日志 --&gt;</span><br><span class="line">        &lt;append&gt;true&lt;/append&gt;</span><br><span class="line">        &lt;!-- 日志文件的格式 --&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;utf-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=&quot;org.springframework.data.mybatis&quot; level=&quot;DEBUG&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.springframework.aop.aspectj&quot; level=&quot;ERROR&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 结合项目的不同环境，配置不同的日志级别和方式  --&gt;</span><br><span class="line">    &lt;springProfile name=&quot;prod&quot;&gt;</span><br><span class="line">        &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;FileAppender&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;springProfile name=&quot;dev&quot;&gt;</span><br><span class="line">        &lt;root level=&quot;DEBUG&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;FileAppender&quot;&gt;&lt;/appender-ref&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring boot 集成mybatis-plus，自定义数据源</title>
      <link href="/2018/12/05/spring-boot-mybatis-datasource/"/>
      <url>/2018/12/05/spring-boot-mybatis-datasource/</url>
      
        <content type="html"><![CDATA[<p>Spring boot的兴起，使得基于Spring框架的开发更加便捷，在和Mybstis的整合中，自定义数据源经常遇到。尽管spring boot可以自动的注入基于spring.datasource.XXXX格式的数据源,XXXX代表的数据库(连接池)信息。在实际的项目中，在遇到多数据源配置时，就需要我们自定义数据源了。<br>下面就让我们一步步的定义一个数据源并配合Mybatis工具使用</p><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:</span><br><span class="line">    - dev</span><br><span class="line">  aop:</span><br><span class="line">    proxy-target-class: true</span><br><span class="line"></span><br><span class="line">  ##数据库连接信息</span><br><span class="line">  datasource:</span><br><span class="line">    antenna01: </span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">      username: root</span><br><span class="line">      password: 0000</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">      ###################以下为druid增加的配置###########################</span><br><span class="line">      type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">      # 下面为连接池的补充设置，应用到上面所有数据源中</span><br><span class="line">      # 初始化大小，最小，最大</span><br><span class="line">      initial-size: 5</span><br><span class="line">      min-idle: 5</span><br><span class="line">      max-active: 20</span><br><span class="line">      # 配置获取连接等待超时的时间</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">      time-between-eviction-runs-millis: 60000</span><br><span class="line">      # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">      min-evictable-idle-time-millis: 300000</span><br><span class="line">      validation-query: SELECT 1 FROM DUAL</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: false</span><br><span class="line">      test-on-return: false</span><br><span class="line">      # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">      pool-prepared-statements: true</span><br><span class="line">      max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙，此处是filter修改的地方</span><br><span class="line">      filters:</span><br><span class="line">        commons-log.connection-logger-name: stat,wall,log4j</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="line">      # 合并多个DruidDataSource的监控数据</span><br><span class="line">      useGlobalDataSourceStat: true</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">#mybatis</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath*:/mybatis/**Mapper.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      #主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;</span><br><span class="line">      id-type: AUTO</span><br><span class="line">      #字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;</span><br><span class="line">      field-strategy: NOT_EMPTY</span><br><span class="line">      #驼峰下划线转换</span><br><span class="line">      table-underline: true</span><br><span class="line">      #逻辑删除配置（下面3个配置）</span><br><span class="line">      logic-delete-value: 1</span><br><span class="line">      logic-not-delete-value: 0</span><br><span class="line">  configuration:</span><br><span class="line">    #配置返回数据库(column下划线命名&amp;&amp;返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId） </span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    cache-enabled: false</span><br><span class="line">    #配置JdbcTypeForNull, oracle数据库必须配置</span><br><span class="line">    jdbc-type-for-null: &apos;null&apos;</span><br></pre></td></tr></table></figure><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean(&quot;dataSource&quot;)</span><br><span class="line">@ConfigurationProperties(&quot;spring.datasource.antenna01&quot;)</span><br><span class="line">public DataSource dataSource() &#123;</span><br><span class="line">return DruidDataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public DataSourceTransactionManager transactionManager(@Qualifier(&quot;dataSource&quot;) DataSource adsDataSource) &#123;</span><br><span class="line">return new DataSourceTransactionManager(dataSource());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mybatis-plus-插件配置"><a href="#mybatis-plus-插件配置" class="headerlink" title="mybatis plus 插件配置"></a>mybatis plus 插件配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MybatisPlusConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public PerformanceInterceptor performanceInterceptor() &#123;</span><br><span class="line">PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();</span><br><span class="line">/* &lt;!-- SQL 执行性能分析，开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长 --&gt; */</span><br><span class="line">performanceInterceptor.setMaxTime(1000);</span><br><span class="line">/* &lt;!--SQL是否格式化 默认false--&gt; */</span><br><span class="line">performanceInterceptor.setFormat(true);</span><br><span class="line">return performanceInterceptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">return new PaginationInterceptor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public SqlSessionFactory sqlSessionFactory(@Qualifier(&quot;dataSource&quot;) DataSource adsDataSource) throws Exception &#123;</span><br><span class="line">final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class="line">sessionFactory.setDataSource(adsDataSource);</span><br><span class="line">return sessionFactory.getObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.scheduling.TaskScheduler;</span><br><span class="line">import org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line">import org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication(exclude = &#123; DataSourceAutoConfiguration.class &#125;)//很重要，不自动加载数据源</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@EnableScheduling</span><br><span class="line">@MapperScan(basePackages = &quot;com.test.**.dao&quot;)</span><br><span class="line">public class JobApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(JobApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //自定义@Scheduled使用的连接池</span><br><span class="line">@Bean</span><br><span class="line">public ScheduledExecutorService scheduledExecutorService() &#123;</span><br><span class="line">ScheduledExecutorService ss = Executors.newScheduledThreadPool(5);</span><br><span class="line">return ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public TaskScheduler taskScheduler() &#123;</span><br><span class="line">return new ConcurrentTaskScheduler();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java lambda 方法使用(2)</title>
      <link href="/2018/12/04/Java-lambda02/"/>
      <url>/2018/12/04/Java-lambda02/</url>
      
        <content type="html"><![CDATA[<p>在项目中有大量使用java的lambda表达式。对初学者而言，在使用的方式和java中已经实现的模板方法有些不了解，于是整理下一些常用的使用函数。以下的表达式和统计相关的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;);</span><br><span class="line"></span><br><span class="line">IntSummaryStatistics collect = list.stream().collect(Collectors.summarizingInt(Integer::valueOf));</span><br><span class="line">long sum = collect.getSum();//和</span><br><span class="line">long count = collect.getCount();//计数</span><br><span class="line">double average = collect.getAverage();//平均值</span><br><span class="line">int max = collect.getMax();//最大值</span><br><span class="line">int min = collect.getMin();//最小值</span><br><span class="line"></span><br><span class="line">System.out.printf(&quot;sum = %d,count=%d,average = %f,min=%d,max%d\n&quot;, sum,count,average,min,max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;String&gt; accumulator = (x,y) -&gt; x.concat(y);</span><br><span class="line">String reduce = list.stream().reduce(&quot;start:&quot;, accumulator);</span><br><span class="line">System.out.println(reduce);//start:12345678910</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; reduce2 = list.stream().reduce(accumulator);</span><br><span class="line">System.out.println(reduce2);//Optional[12345678910]</span><br><span class="line"></span><br><span class="line">Integer reduce3 = Stream.of(1,2,3,4,5,6,7,8,9,10).reduce(0, (x,y) -&gt; x + y);</span><br><span class="line">System.out.println(reduce3);</span><br><span class="line"></span><br><span class="line">Integer reduce4 = Stream.of(1,2,3,4,5,6,7,8,9,10).reduce(0,  (x,y) -&gt; x + y,  (x,y) -&gt; x + y);</span><br><span class="line">System.out.println(reduce4);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java lambda 方法使用(1)</title>
      <link href="/2018/12/03/Java-lambda01/"/>
      <url>/2018/12/03/Java-lambda01/</url>
      
        <content type="html"><![CDATA[<p>在项目中有大量使用java的lambda表达式。对初学者而言，在使用的方式和java中已经实现的模板方法有些不了解，于是整理下一些常用的使用函数。以下的表达式主要式过滤、分组、收集器相关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = Lists.newArrayList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;);</span><br><span class="line">//打印元素</span><br><span class="line">list.stream().forEach(x -&gt;&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//打印元素</span><br><span class="line">list.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">//过滤元素</span><br><span class="line">List&lt;String&gt; collect = list.stream()</span><br><span class="line">.filter(x -&gt; Integer.valueOf(x) % 2 == 0)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">//判断元素是否满足预判条件，全部满足</span><br><span class="line">boolean allMatch = list.stream().allMatch(x -&gt; Integer.valueOf(x) % 2 == 0);</span><br><span class="line"></span><br><span class="line">//判断元素是否满足预判条件,只要有一个满足</span><br><span class="line">boolean anyMatch = list.stream().anyMatch(x -&gt; Integer.valueOf(x) % 2 == 0);</span><br><span class="line"></span><br><span class="line">//分组</span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; collect2 = list.stream()</span><br><span class="line">.collect(Collectors.groupingBy(x -&gt; Integer.valueOf(x) % 4));</span><br><span class="line"></span><br><span class="line">//特殊的，分成两组</span><br><span class="line">Map&lt;Boolean, List&lt;String&gt;&gt; collect3 = list.stream()</span><br><span class="line">.collect(Collectors.partitioningBy(x -&gt; Integer.valueOf(x) % 2 == 0));</span><br><span class="line"></span><br><span class="line">//转Map</span><br><span class="line">Map&lt;String, String&gt; collect4 = list.stream()</span><br><span class="line">.collect(Collectors.toMap(x -&gt; &quot;key&quot; + x, x -&gt; &quot;value&quot; + x));</span><br><span class="line"></span><br><span class="line">//指定返回集合</span><br><span class="line">TreeSet&lt;String&gt; collect5 = list.stream()</span><br><span class="line">.collect(Collectors.toCollection(() -&gt; new TreeSet&lt;String&gt;()));</span><br><span class="line"></span><br><span class="line">//map转换</span><br><span class="line">List&lt;Integer&gt; collect6 = list.stream().map(x -&gt; Integer.valueOf(x)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">//mapToInt,并求和</span><br><span class="line">list.stream().mapToInt(new ToIntFunction&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int applyAsInt(String value) &#123;</span><br><span class="line">return Integer.valueOf(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).sum();</span><br><span class="line"></span><br><span class="line">//自定义收集器</span><br><span class="line">Supplier&lt;StringBuffer&gt; supplier = () -&gt; new StringBuffer(&quot;&quot;);</span><br><span class="line">BiConsumer&lt;StringBuffer,String&gt; accumulator = (x,y) -&gt; x.append(y);</span><br><span class="line">BiConsumer&lt;StringBuffer,StringBuffer&gt; combiner = (x,y) -&gt; x.append(y);</span><br><span class="line">StringBuffer collect7 = list.stream().collect(supplier , accumulator , combiner);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>easy poi导出多sheet</title>
      <link href="/2018/12/02/easypoi-export/"/>
      <url>/2018/12/02/easypoi-export/</url>
      
        <content type="html"><![CDATA[<p>excel导出是一个常见的功能，也有很多工具jar包。easyPOI是在一次外包项目中遇到的。在查阅官方文档时，发现大部分的导出都是基于单独的POJO说明的，尤其是对多sheet的导出更抽象。如果是每个sheet的内容的标题是一样的，也可以单独定义一个POJO。但是项目中却遇到了每个sheet的标题都不一样，如果继续使用POJO的方式就有点太麻烦了，于是乎在调研结合官方提供的蛛丝马迹，整合了easy poi使用ExcelExportEntity生成多sheet的excel文件。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easypoi-base&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easypoi-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easypoi-annotation&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> try &#123;</span><br><span class="line">       </span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; sheets = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">    </span><br><span class="line">    for(int i = 0;i&lt;10;i++) &#123;</span><br><span class="line">    Map&lt;String,Object&gt; sheet = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        </span><br><span class="line">            List&lt;ExcelExportEntity&gt; entity = new ArrayList&lt;ExcelExportEntity&gt;();//构造对象等同于@Excel</span><br><span class="line">            </span><br><span class="line">            entity.add(new ExcelExportEntity(&quot;性别&quot;, &quot;sex&quot;));</span><br><span class="line">            entity.add(new ExcelExportEntity(&quot;姓名&quot;, &quot;name&quot;));</span><br><span class="line">            </span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            Map&lt;String,Object&gt; h1 = new HashMap&lt;String,Object&gt;();</span><br><span class="line">            h1.put(&quot;name&quot;, &quot;name&quot; + i);</span><br><span class="line">            h1.put(&quot;sex&quot;, &quot;sex&quot; +  i);</span><br><span class="line">            Map&lt;String,Object&gt; h2 = new HashMap&lt;String,Object&gt;();</span><br><span class="line">            h2.put(&quot;name&quot;, &quot;name&quot; +i+i);</span><br><span class="line">            h2.put(&quot;sex&quot;, &quot;sex&quot; +i+i);</span><br><span class="line">            list.add(h1);</span><br><span class="line">            list.add(h2);</span><br><span class="line">            </span><br><span class="line">            sheet.put(NormalExcelConstants.CLASS, ExcelExportEntity.class);</span><br><span class="line">            sheet.put(NormalExcelConstants.DATA_LIST, list);</span><br><span class="line">            sheet.put(NormalExcelConstants.PARAMS, new ExportParams(null, &quot;sheet&quot;+i));</span><br><span class="line">            sheet.put(NormalExcelConstants.MAP_LIST, entity);</span><br><span class="line">            sheets.add(sheet);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     Workbook workbook = new HSSFWorkbook();</span><br><span class="line">     </span><br><span class="line">     for(Map&lt;String,Object&gt; map : sheets) &#123;</span><br><span class="line">     ExcelExportService server = new ExcelExportService();</span><br><span class="line">     ExportParams param = (ExportParams) map.get(&quot;params&quot;);</span><br><span class="line">     @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">List&lt;ExcelExportEntity&gt; entity = (List&lt;ExcelExportEntity&gt;) map.get(&quot;mapList&quot;);</span><br><span class="line">     Collection&lt;?&gt; data = (Collection&lt;?&gt;) map.get(&quot;data&quot;);</span><br><span class="line">     server.createSheetForMap(workbook, param, entity, data);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;D:/ExcelExportForMap.tt.xls&quot;);</span><br><span class="line">        workbook.write(fos);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyPOI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开始征程</title>
      <link href="/2018/12/01/startFlag/"/>
      <url>/2018/12/01/startFlag/</url>
      
        <content type="html"><![CDATA[<p>最近在使用某平台记录技能分享时，发现广告是越来越多，查阅文章还要强制登录。于是乎想脱离原来的blog系统，正好在调研过程中发现了hexo + github的记录blog的方式，后续会将文件都转移到这个平台上。同时也立一个FLAG吧，即将来到的2019年，将分享精神传播下。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
